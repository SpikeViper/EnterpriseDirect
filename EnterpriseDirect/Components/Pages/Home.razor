@using System.Linq
@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

@if (_userName is not null) 
{
    <h2>Welcome back, @_userName!</h2>
} 
else 
{
    <h2>Welcome to Enterprise Direct!</h2>
}

<AuthorizeView>
    <Authorized>
        <h3>
            Your role is: @(_isAdmin ? "Administrator" : "Read Only").
        </h3>
    </Authorized>
    <NotAuthorized>
        <p>Please use the sidebar to log in or register an account.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private AuthenticationState _authState;
    private string? _userName;
    private bool _isAdmin;
    
    private IEnumerable<string> _currentUserRoles = Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = _authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            // Try to get the user's display name, fallback to email or username
            _userName = user.Identity.Name 
                       ?? user.Claims.FirstOrDefault(c => c.Type == "name")?.Value
                       ?? user.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
            
            _isAdmin = user.Claims.Any(x => x.Type == System.Security.Claims.ClaimTypes.Role && x.Value == "Admin");
        }
    }
}